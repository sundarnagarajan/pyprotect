# ------------------------------------------------------------------------
# This Dockerfile is based on Dockerfile of the same name under /scripts
# It provides an environment with functioning PY3, PY2, PYPY3, PYPY2
# This Dockerfile also installs docker
# To use this as a daily-driver development environment, you will
# ALMOST CERTAINLY need to install additional software
# ------------------------------------------------------------------------
FROM ubuntu:jammy

# Check required arg before doing extra works
ARG HOST_GID
ARG HOST_GROUPNAME
ARG HOST_UID
ARG HOST_USERNAME
ARG HOME_DIR
ARG PYPROTECT_DIR

# ----------------------------------------------------------------------
# Common things to always do
# ----------------------------------------------------------------------
ENV DEBIAN_FRONTEND=noninteractive
RUN dpkg-reconfigure debconf --frontend=noninteractive
RUN apt-config dump | grep -we Recommends -e Suggests | sed s/1/0/ > /etc/apt/apt.conf.d/999no_recommend_suggests
# Next 3 lines are required for pydoc2 to show unicode data
ENV LANG=en_US.UTF-8
ENV LANGUAGE=$LANG
ENV LC_ALL=$LANG

RUN rm -rf /var/lib/apt/lists/*
RUN apt-get clean
RUN apt-get update
RUN apt-get install -y apt-utils locales 2>/dev/null
# Next 2 lines are required for pydoc2 to show unicode data
RUN locale-gen $LANG 2>/dev/null
RUN dpkg-reconfigure locales 2>/dev/null
RUN apt-get upgrade -y
RUN apt-get dist-upgrade -y
# ----------------------------------------------------------------------
# Create the non-root user
RUN mkdir -p $HOME_DIR
RUN addgroup --gid $HOST_GID $HOST_GROUPNAME
RUN adduser \
    --home ${HOME_DIR} --no-create-home \
    --uid $HOST_UID --gid $HOST_GID \
    --disabled-password --gecos "$HOST_USERNAME" $HOST_USERNAME
RUN chown ${HOST_UID}:${HOST_GID} $HOME_DIR
# NORMAL_USER env var is used in install_test_in_docker.sh
ENV NORMAL_USER=$HOST_USERNAME


ENV PIP_ROOT_USER_ACTION=ignore

# Need build-essential python2-dev python3-dev and cython3 ONLY to BUILD module
# These are not required to install from PyPi or from bdist / wheel
# python2-setuptools-whl and python2-pip-whl are only needed to create
# PY2 virtualenv using virtualenv command
#
# PY3-only packages: python3-dev python3-setuptools python3-pip python3-virtualenv python3-venv
# PY2-only packages: python2-dev python-setuptools python2-setuptools-whl python2-pip-whl
RUN apt-get install -y \
    curl less unzip git \
    cython3 build-essential twine \
    python3-dev python3-setuptools python3-pip python3-virtualenv python3-venv \
    python2-dev python-setuptools python2-setuptools-whl python2-pip-whl 

# Upgrade pip3 to 22.3.1 - v22.0.2+dfsg-1 has problems uninstalling packages !
# AttributeError: 'EggMetadata' object has no attribute 'isdir'
# Silence irrelevant warning about running pip as root user
RUN PIP_ROOT_USER_ACTION=ignore pip3 install -U "pip>=22.3.1" 2>/dev/null

# On Ubuntu / Debian cannot install python-pip and python3-pip
# together - they conflict among each other
# Install pip2 from https://bootstrap.pypa.io/get-pip.py
# Suppress stderr to hide irrelevant warning about Python2 EOL
RUN curl -s https://raw.githubusercontent.com/pypa/get-pip/main/public/2.7/get-pip.py | python2 2>/dev/null

# ----------------------------------------------------------------------
# Install pypy, pypy3 from PPA
RUN apt-get install -y apt-transport-https ca-certificates gnupg dirmngr curl less
WORKDIR /etc/apt/repo-keyrings
RUN curl -sL "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2862D0785AFACD8C65B23DB0251104D968854915" | gpg --dearmor > pypy.gpg
WORKDIR /etc/apt/sources.list.d
RUN echo "deb [ arch=amd64 signed-by=/etc/apt/repo-keyrings/pypy.gpg ] https://ppa.launchpadcontent.net/pypy/ppa/ubuntu jammy main" > pypy.list
RUN apt-get update
# PYPY3-only packages: pypy3 pypy3-dev pypy3-venv
# PYPY2-only packages: pypy pypy-dev pypy-setuptools
RUN apt-get install -y pypy3 pypy3-dev pypy3-venv pypy pypy-dev pypy-setuptools

# Installing pip for pypy2 is not straightforward
# get-pip.py from https://bootstrap.pypa.io/pip/2.7/get-pip.py does not install with
# pypy because assert on line 719 of 
# /usr/local/lib/pypy2.7/dist-packages/pip/_internal/operations/install/wheel.py
# fails:
#   assert os.path.exists(pyc_path)
#
# Workaround used is to copy pip and wheel from python2.7 dir and PATCH
# /usr/local/lib/pypy2.7/dist-packages/pip/_internal/operations/install/wheel.py
# to comment out line 719
# Although this works for the purpose of this Docker image - using 'pypy -m pip'
# to install / uninstall pyprotect, there may be other untested effects
# See: https://github.com/pypa/pip/issues/8653#issuecomment-667124536
# It seems to be something to do with PEP 3147 and related differences
# between python 2.7 and pypy 2.7
#
WORKDIR /usr/local/lib/python2.7/dist-packages
RUN cp -a pip* wheel* /usr/local/lib/pypy2.7/dist-packages/
RUN sed -i '719,719 s/^/#/' /usr/local/lib/pypy2.7/dist-packages/pip/_internal/operations/install/wheel.py
# ----------------------------------------------------------------------

# Install docker
RUN apt-get install -y docker

ENV PYTHONDONTWRITEBYTECODE=Y
RUN rm -rf /var/lib/apt/lists
# Start in PYPROTECT_DIR
WORKDIR $PYPROTECT_DIR
